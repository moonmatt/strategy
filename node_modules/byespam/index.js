const all = [];
let history = [];
module.exports = options => {
	options.forEach(options => {
		const { max_requests, protection_timeout, effect, path } = options;
		if(!max_requests || !protection_timeout || !effect) throw new Error('Invalid parameters, required: max_request, protection_timeout, effect, path!');
		all.push((req, res, next) => {
			if(req.path !== options.path){
				next();
				return;
			}
			history = history.filter((request, index) => Date.now() - request.date < protection_timeout * 2);
			history.push({ date: Date.now(), token: req.ip });
			const attention = history.filter((request, index) => Date.now() - request.date <= protection_timeout && options.token === req.ip);
			if(attention.length > max_requests){
				res.status(429);
				if(typeof effect === 'function') effect(req, res, options.token);
				else{
					if(typeof effect === 'object') res.setHeader('Content-Type', 'application/json');
					try {res.send(effect)} catch(e){ /* user has quit before loading */ };
				}
			}
			else next();
		});
	});

	return { all };
};